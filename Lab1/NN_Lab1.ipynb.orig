{
<<<<<<< HEAD
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sklearn\n",
    "data = pd.read_csv(\"data/ionosphere.data\",header=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Νευρωνικά Δίκτυα \n",
    "## Εργασία 1\n",
    "### team 27\n",
    "Αυγερινού Ανδριάνα  03116192 <br>\n",
    "Βασιλείου Μαρία 03116167<br>\n",
    "Γκέγκας Δημήτριος 03116004\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Μικρό DataSet (S07)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Βασικές πληροφορίες"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Σύντομη παρουσίαση του Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Το πρώτο dataset που θα εξετάσουμε είναι το [Ionosphere](http://archive.ics.uci.edu/ml/datasets/Ionosphere).  Πρόκειται για μία συλλογή από δεδομένα κεραιών που συλλέχτηκαν από το Goose Bay εργαστήριο. Συγκεκριμένα τα σήματα από τις 16 κεραίες  υψηλής συχνότητας επεξεργαστήκαν με μία αυτοσυχετική συνάρτηση και τα αποτελέσματα είναι 17 μιγαδική αριθμοί που αντιστοιχούν στο ηλεκτρομαγνητικό σήμα. Παρακάτω βλέπουμε την αυτοσυχετική συνάρτηση $R$<br>\n",
    "$$R(t,k)=\\sum_{i=0}^{16} C(t + iT)C^*[t + (i + k)T]$$ <br>\n",
    "όπου $k$ = pulse number (0,16) <br>\n",
    "$T$ =pulse repetition period <br>\n",
    "$C(t)$ = received signal\n",
    "\n",
    "Τα δεδομένα παρουσιάζουν για κάποιο pulse pattern εάν η Ιονόσφαιρα έχει την συγκεκριμένη δομή. Οπότε μιλάμε για ένα πρόβλημα δυαδικής ταξινόμησης ( \"good\" , \"bad\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "      <th>30</th>\n",
       "      <th>31</th>\n",
       "      <th>32</th>\n",
       "      <th>33</th>\n",
       "      <th>34</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.99539</td>\n",
       "      <td>-0.05889</td>\n",
       "      <td>0.85243</td>\n",
       "      <td>0.02306</td>\n",
       "      <td>0.83398</td>\n",
       "      <td>-0.37708</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.03760</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.51171</td>\n",
       "      <td>0.41078</td>\n",
       "      <td>-0.46168</td>\n",
       "      <td>0.21266</td>\n",
       "      <td>-0.34090</td>\n",
       "      <td>0.42267</td>\n",
       "      <td>-0.54487</td>\n",
       "      <td>0.18641</td>\n",
       "      <td>-0.45300</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.18829</td>\n",
       "      <td>0.93035</td>\n",
       "      <td>-0.36156</td>\n",
       "      <td>-0.10868</td>\n",
       "      <td>-0.93597</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.04549</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.26569</td>\n",
       "      <td>-0.20468</td>\n",
       "      <td>-0.18401</td>\n",
       "      <td>-0.19040</td>\n",
       "      <td>-0.11593</td>\n",
       "      <td>-0.16626</td>\n",
       "      <td>-0.06288</td>\n",
       "      <td>-0.13738</td>\n",
       "      <td>-0.02447</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.03365</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.00485</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.12062</td>\n",
       "      <td>0.88965</td>\n",
       "      <td>0.01198</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.40220</td>\n",
       "      <td>0.58984</td>\n",
       "      <td>-0.22145</td>\n",
       "      <td>0.43100</td>\n",
       "      <td>-0.17365</td>\n",
       "      <td>0.60436</td>\n",
       "      <td>-0.24180</td>\n",
       "      <td>0.56045</td>\n",
       "      <td>-0.38238</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.45161</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.71216</td>\n",
       "      <td>-1.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.90695</td>\n",
       "      <td>0.51613</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.20099</td>\n",
       "      <td>0.25682</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.32382</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>-0.02401</td>\n",
       "      <td>0.94140</td>\n",
       "      <td>0.06531</td>\n",
       "      <td>0.92106</td>\n",
       "      <td>-0.23255</td>\n",
       "      <td>0.77152</td>\n",
       "      <td>-0.16399</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.65158</td>\n",
       "      <td>0.13290</td>\n",
       "      <td>-0.53206</td>\n",
       "      <td>0.02431</td>\n",
       "      <td>-0.62197</td>\n",
       "      <td>-0.05707</td>\n",
       "      <td>-0.59573</td>\n",
       "      <td>-0.04608</td>\n",
       "      <td>-0.65697</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   0   1        2        3        4        5        6        7        8   \\\n",
       "0   1   0  0.99539 -0.05889  0.85243  0.02306  0.83398 -0.37708  1.00000   \n",
       "1   1   0  1.00000 -0.18829  0.93035 -0.36156 -0.10868 -0.93597  1.00000   \n",
       "2   1   0  1.00000 -0.03365  1.00000  0.00485  1.00000 -0.12062  0.88965   \n",
       "3   1   0  1.00000 -0.45161  1.00000  1.00000  0.71216 -1.00000  0.00000   \n",
       "4   1   0  1.00000 -0.02401  0.94140  0.06531  0.92106 -0.23255  0.77152   \n",
       "\n",
       "        9   ...       25       26       27       28       29       30  \\\n",
       "0  0.03760  ... -0.51171  0.41078 -0.46168  0.21266 -0.34090  0.42267   \n",
       "1 -0.04549  ... -0.26569 -0.20468 -0.18401 -0.19040 -0.11593 -0.16626   \n",
       "2  0.01198  ... -0.40220  0.58984 -0.22145  0.43100 -0.17365  0.60436   \n",
       "3  0.00000  ...  0.90695  0.51613  1.00000  1.00000 -0.20099  0.25682   \n",
       "4 -0.16399  ... -0.65158  0.13290 -0.53206  0.02431 -0.62197 -0.05707   \n",
       "\n",
       "        31       32       33  34  \n",
       "0 -0.54487  0.18641 -0.45300   g  \n",
       "1 -0.06288 -0.13738 -0.02447   b  \n",
       "2 -0.24180  0.56045 -0.38238   g  \n",
       "3  1.00000 -0.32382  1.00000   b  \n",
       "4 -0.59573 -0.04608 -0.65697   g  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Αριθμός δειγμάτων και χαρακτηριστικών, είδος χαρακτηριστικών. Υπάρχουν μη διατεταγμένα χαρακτηριστικά και ποια είναι αυτά;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To dataset περιέχει 351 δείγματα, με 34 χαρακτηριστικά και την κλάση όπου ανήκει το δείγμα.  Τα χαρακτηριστικά είναι συνεχή και κανονικοποιημένα στο διάστημα $[-1,1]$ . Δεν έχουμε μη διατεταγμένα χαρακτηριστικά."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Υπάρχουν επικεφαλίδες; Αρίθμηση γραμμών;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Το dataset δεν περιέχει επικεφαλίδες, ούτε αρίθμηση γραμμών."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Ποιες είναι οι ετικέτες των κλάσεων και σε ποια κολόνα βρίσκονται; "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Η ετικέτες των κλάσεων βρίσκονται στην τελευταία στήλη και έχουνε τιμές ‘g’ και ‘b’ που αντιστοιχούν στις κλάσεις “good” και “bad” αντίστοιχα. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Χρειάστηκε να κάνετε μετατροπές στα αρχεία text και ποιες? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Από το dataset πήραμε τις 34 πρώτες στήλες ώς features και την τελευταία στήλη ως labels. Τα labels τα μετατρέψαμε σε αριθμητική τιμή (0,1). Όπου 1 αντιστοιχεί στην κλάση \"good\" και 0 στην κλάση \"bad\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels=(data[34]==\"g\").to_numpy().astype(int)\n",
    "features=data.drop(labels=34,axis=1).to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Υπάρχουν απουσιάζουσες τιμές; Πόσα είναι τα δείγματα με απουσιάζουσες τιμές και ποιο το ποσοστό τους επί του συνόλου; "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Τα δεδομένα μας δεν περιέχουν missing values. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(features==None).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. Ποιος είναι ο αριθμός των κλάσεων και τα ποσοστά δειγμάτων τους επί του συνόλου; Αν θεωρήσουμε ότι ένα dataset είναι μη ισορροπημένο αν μια οποιαδήποτε κλάση είναι 1.5 φορά πιο συχνή από κάποια άλλη (60%-40% σε binary datasets) εκτιμήστε την ισορροπία του dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Έχουμε δύο κλάσεις, την \"good\" και την \"bad\" που αντιστοιχούν σε label 1 και 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Το 64.1% των δεδομένων είναι good και το υπόλοιπο 35.9% είναι bad\n",
      "Η ισορροπία του dataset 1.79\n"
     ]
    }
   ],
   "source": [
    "Pgood=100*sum(labels==1)/len(labels)\n",
    "Pbad=100*sum(labels==0)/len(labels)\n",
    "print(\"Το \"+str(round(Pgood,2)) + \"% των δεδομένων είναι good και το υπόλοιπο \" +str(round(Pbad,2))+ \"% είναι bad\")\n",
    "print(\"Η ισορροπία του dataset \"+str(round(Pgood/Pbad,2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. Διαχωρίστε σε train και test set. Εάν υπάρχουν απουσιάζουσες τιμές και μη διατεταγμένα χαρακτηριστικά διαχειριστείτε τα και αιτιολογήστε τις επιλογές σας."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Χωρίζουμε τα χαρακτηριστικά μας σε train και test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test , y_train, y_test = train_test_split(features,labels,test_size=0.2,shuffle=True,random_state=20204)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ταξινόμηση"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Σε αυτό το dataset θα δούμε τους 3 παρακάτω Classifiers: \n",
    "* Dummy Classifier: όπου χρησιμοποιείται ως βάση για την αξιολόγηση των υπόλοιπων Classifier.\n",
    "* K - Νearest Neighbors: όπου κάνει πρόβλεψη με βάση του K κοντινότερους γείτονες. Συγκεκριμένα επιστρέφει την κλάση στην οποία ανήκουν οι περισσότεροι από αυτούς τους γείτονες.\n",
    "* Gaussian Naïve Bayes Classifier: Ένα Bayes Classifier ταξινομεί το δείγμα X στην κλάση 𝑪𝒚 σύμφωνα με τον παρακάτω κανόνα. \n",
    "$$y= argmax_{k \\in (1,2,...,N)} {P(C_k)*P(X|C_k)} $$\n",
    "Ενώ ένας Naïve Bayes Classifier για να απλοποιήσει το μοντέλο κάνει την υπόθεση ότι τα χαρακτηριστικά του κάθε δείγματος είναι ανεξάρτητα και ασυσχέτιστα μεταξύ τους. Έτσι καταλήγει στον παρακάτω απλοποιημένο κανόνα.\n",
    "$$y= argmax_{k \\in (1,2,...,N)} {P(C_k)\\prod_{i=0}^F P(x_i|C_k)} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from IPython.display import Markdown as md"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Baseline Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Διαχειριστείτε τυχόν απουσιάζουσες τιμές. Εκπαιδεύστε στο train τους classifiers με default τιμές (απλή αρχικοποίηση). Κάντε εκτίμηση στο test set (μαζί με τους dummy) και τυπώστε για κάθε estimator: confusion matrix, f1-micro average και f1-macro average.\n",
    "\n",
    "### 2. Για κάθε averaged metric, εκτυπώστε bar plot συγκρισης με τις τιμές του συγκεκριμένου f1 για όλους τους classifiers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Παρακάτω βλέπουμε τις μετρικές με βάση τις οποίες θα αξιολογήσουμε τους classifiers μας. <br>\n",
    "\n",
    "Ακρίβεια -Precision- ( P ) είναι ο λόγος των true positives ( Tp ) ως προς τον αριθμό των true positives συν τον αριθμό των false positives ( Fp ).\n",
    "\n",
    "$$ P = { T_p \\over {T_p+F_p}}$$ \n",
    "\n",
    "Ανάκληση -Recall- ( R ) είναι ο λόγος των true positives ( Tp ) ως προς τον αριθμό των true positives συν τον αριθμό των false negatives ( Fn ).\n",
    "\n",
    "$$R = {{T_p} \\over{ T_p+F_n}}$$ \n",
    "\n",
    "Συχνά χρησιμοποιούμε και το ( F1 ) score, το οποίο είναι ο αρμονικός μέσος της ακρίβειας και της ανάκλησης.\n",
    "\n",
    "$$F_1= 2  {   {P×R}\\over{P+R}}$$\n",
    "\n",
    "Κάθε μία από τις παραπάνω μετρικές αναφέρεται σε μία κλάση. Για να βρούμε το αποτέλεσμα για τον Classifier πρέπει να πάρουμε έναν μέσο όρο. Θα χρησιμοποιήσουμε δύο avg τακτικές, την micro και την macro. <br> \n",
    "Με την macro ουσιαστικά παίρνουμε έναν μέσο όρο ως προς τον αριθμό των κλάσεων. Ενώ με την micro παίρνουμε τον μέσο όρο του κάθε δείγματος. Στην περίπτωση μας η micro avg ισοδυναμεί με ένα weight avg, όπου έχουμε τον μέσο όρο τον κλάσεων με βάρος το ποσοστό των δειγμάτων στο dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import make_classification\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "\n",
    "def show_evaluation(X_test,y_test,clf_list,labels):\n",
    "    f1_micro=[]\n",
    "    f1_macro=[]\n",
    "    recall_micro=[]\n",
    "    recall_macro=[]\n",
    "    precision_micro=[]\n",
    "    precision_macro=[]\n",
    "    for clf,name in zip(clf_list,labels):\n",
    "        print(name)\n",
    "        predict=clf.predict(X_test)\n",
    "        report=classification_report(y_test,predict,labels=[0,1],target_names=[\"Bad\",\"Good\"])\n",
    "        macro=precision_recall_fscore_support(y_test, predict, average='macro')\n",
    "        micro=precision_recall_fscore_support(y_test, predict, average='micro')\n",
    "        precision_macro.append(macro[0])\n",
    "        precision_micro.append(micro[0])\n",
    "        recall_macro.append(macro[1])\n",
    "        recall_micro.append(micro[1])\n",
    "        f1_macro.append(macro[2])\n",
    "        f1_micro.append(micro[2])\n",
    "        print(\"The classification report for \"+name)\n",
    "        print(report)\n",
    "        print(\"The confusion matrix for \"+name)\n",
    "        sns.heatmap(confusion_matrix(y_test,predict),xticklabels=[\"Bad\",\"Good\"],yticklabels=[\"Bad\",\"Good\"])\n",
    "        plt.show()\n",
    "    print(\"# F1 metric for all classifiers\")\n",
    "    # width of the bars\n",
    "    barWidth = 0.1\n",
    "    # The x position of bars\n",
    "    r1 = np.arange(len(f1_micro))\n",
    "    r2 = [x + barWidth for x in r1]\n",
    "    r3 = [x + barWidth for x in r2]\n",
    "    r4 = [x + barWidth for x in r3]\n",
    "    r5 = [x + barWidth for x in r4]\n",
    "    r6 = [x + barWidth for x in r5]\n",
    "    # Create blue bars\n",
    "    plt.bar(r1, f1_micro, width = barWidth, color = 'blue', edgecolor = 'black', capsize=7, label='f1_micro')\n",
    "    # Create cyan bars\n",
    "    plt.bar(r2, f1_macro, width = barWidth, color = 'cyan', edgecolor = 'black', capsize=7, label='f1_macro')\n",
    "    # Create blue bars\n",
    "    plt.bar(r3, recall_micro, width = barWidth, color = 'pink', edgecolor = 'black', capsize=7, label='recall_micro')\n",
    "    # Create cyan bars\n",
    "    plt.bar(r4, recall_macro, width = barWidth, color = 'red', edgecolor = 'black', capsize=7, label='recall_macro')\n",
    "    # Create blue bars\n",
    "    plt.bar(r5, precision_micro, width = barWidth, color = 'orange', edgecolor = 'black', capsize=7, label='precision_micro')\n",
    "    # Create cyan bars\n",
    "    plt.bar(r6, precision_macro, width = barWidth, color = 'yellow', edgecolor = 'black', capsize=7, label='precision_macro')\n",
    "    \n",
    "    # general layout\n",
    "    plt.xticks([r + barWidth for r in range(len(f1_micro))], labels)\n",
    "    plt.ylabel('F1 metric')\n",
    "    plt.legend()\n",
    "\n",
    "    # Show graphic\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# init classifiers\n",
    "clf_Dummy=DummyClassifier(strategy=\"stratified\")\n",
    "clf_KNN=KNeighborsClassifier(n_jobs=-1)\n",
    "clf_GNB=GaussianNB()\n",
    "\n",
    "#fit train set's data\n",
    "clf_Dummy=clf_Dummy.fit(X_train,y_train)\n",
    "clf_KNN=clf_KNN.fit(X_train,y_train)\n",
    "clf_GNB=clf_GNB.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dummy\n",
      "The classification report for Dummy\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.38      0.52      0.44        23\n",
      "        Good       0.72      0.58      0.64        48\n",
      "\n",
      "    accuracy                           0.56        71\n",
      "   macro avg       0.55      0.55      0.54        71\n",
      "weighted avg       0.61      0.56      0.58        71\n",
      "\n",
      "The confusion matrix for Dummy\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN\n",
      "The classification report for KNN\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.93      0.57      0.70        23\n",
      "        Good       0.82      0.98      0.90        48\n",
      "\n",
      "    accuracy                           0.85        71\n",
      "   macro avg       0.88      0.77      0.80        71\n",
      "weighted avg       0.86      0.85      0.83        71\n",
      "\n",
      "The confusion matrix for KNN\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GNB\n",
      "The classification report for GNB\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.84      0.91      0.87        23\n",
      "        Good       0.96      0.92      0.94        48\n",
      "\n",
      "    accuracy                           0.92        71\n",
      "   macro avg       0.90      0.91      0.91        71\n",
      "weighted avg       0.92      0.92      0.92        71\n",
      "\n",
      "The confusion matrix for GNB\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# F1 metric for all classifiers\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_evaluation(X_test,y_test,[clf_Dummy,clf_KNN,clf_GNB],[\"Dummy\",\"KNN\",\"GNB\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Σχολιάστε τα αποτελέσματα των plots και των τιμών precision, recall, f1 των πινάκων σύγχυσης"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Όπως παρατηρούμε ο Dummy classifier έχει macro avg F1 43%, ενώ micro avg 50%. Αυτό συμβαίνει καθώς το dataset μας έχει περισσότερα “good” δείγματα, διότι δεν είναι ισορροπημένο. Στην κλάση “good” ο dummy έχει αρκετά καλύτερη απόδοση στην ταξινόμηση των δειγμάτων σε σχέση με τα “bad” οπότε ένας weighted μέσος όρος έχει καλύτερα αποτελέσματα από έναν macro. Για τον ίδιο λόγο το accuracy έχει υψηλό επίπεδο, ενώ βλέπουμε ότι κανένα από τα δείγματα της “bad” δεν ταξινομείται σωστά. Γενικά, θέλουμε trade-off μεταξύ της micro και macro μετρικής.\n",
    "Βλέποντας τώρα τον KNN classifier, έχουμε εμφανώς καλύτερα αποτελέσματα. Έχουμε recall για την κλάση “good” στο 98%, το οποίο σημαίνει ότι τα δείγματα της “good” ταξινομούνται σωστά. Βλέπουμε από την άλλη ένα αρκετά καλό precision της “bad” κλάσης (93%), το οποίο αρχικά θα ήταν misleading εάν δεν βλέπαμε τις υπόλοιπες μετρικές. Καθώς το recall της “bad” είναι πολύ χαμηλό, καταλαβαίνουμε ότι το υψηλό ποσοστό στο precision οφείλεται στην μείωση των False Positive για την κλάση “bad” (ταξινομήθηκαν στην κλάση “bad” ένω είναι “good”) καθώς ταξινομούνται αρκετά καλά τα “good” δείγματα.\n",
    "\n",
    "Τέλος, ο GNB πετυχαίνει, χωρίς καμία βελτιστοποίηση, ένα accuracy 92%, με την F1 μετρική να είναι επίσης 92% (για micro και 91% για macro). Αυτό φαίνεται και στο confusion matrix όπου έχουμε αρκετά καλή εικόνα της επίδοσης του classifier. Από τους τρεις classifiers φαίνεται να έχει την καλύτερη απόδοση και την μικρότερη διακύμανση στις μετρικές. Παρατηρούμε ότι, παρα το γεγονός ότι η recall και για τις δύο κλάσεις είναι στο 91-92%, έχουμε απόκλιση των τιμών στο precision. Αυτό οφείλεται στο γεγονός ότι τα “bad” δεδομένα έχουν λιγότερα δείγματα, οπότε κάθε classifier θα είναι σε θέση να εκπαιδευτεί καλύτερα πάνω στα “good” δεδομένα από τα “bad”.\n",
    "\n",
    "Στο τελευταίο διάγραμμα φαίνονται καλύτερα όλες οι μετρικές και για τους τρεις classifiers. Ο dummy είναι σαφώς υποδεέστερος απ’ τους άλλους δύο αλλά μας χρησιμεύει ως ένα κατώφλι απόδοσης για τις παρακάτω προσπάθειες βελτιστοποίησης του classification.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Βελτιστοποίηση ταξινομητών"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Στην συνέχεια, θα προσπαθήσουμε να βελτιστοποιήσουμε τους παραπάνω classifiers με την διαδικασία του preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.pipeline import Pipeline\n",
    "from imblearn.pipeline import Pipeline\n",
    "\n",
    "from sklearn.feature_selection import VarianceThreshold\n",
    "from sklearn.preprocessing import StandardScaler # φέρνουμε τον StandarScaler ως transformer που έχει .transform kai ΄όχι ως scale()\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "def get_best_parameters(X_train, y_train,untrained_estimators,labels):\n",
    "    estimators=[]\n",
    "    f1_micro=[]\n",
    "    f1_macro=[]\n",
    "    recall_micro=[]\n",
    "    recall_macro=[]\n",
    "    precision_micro=[]\n",
    "    precision_macro=[]\n",
    "    time_train=[]\n",
    "    param=[]\n",
    "    for estimator,name in zip(untrained_estimators,labels):\n",
    "        start_time = time.time()\n",
    "        trained=estimator.fit(X_train, y_train)\n",
    "        estimators.append(trained)\n",
    "        preds = estimator.predict(X_test)\n",
    "        macro=precision_recall_fscore_support(y_test, preds, average='macro')\n",
    "        micro=precision_recall_fscore_support(y_test, preds, average='micro')\n",
    "        precision_macro.append(macro[0])\n",
    "        precision_micro.append(micro[0])\n",
    "        recall_macro.append(macro[1])\n",
    "        recall_micro.append(micro[1])\n",
    "        f1_macro.append(macro[2])\n",
    "        f1_micro.append(micro[2])\n",
    "        time_train.append(time.time() - start_time)\n",
    "        param.append(estimator.best_params_)\n",
    "    result_para_total=[]\n",
    "    for para in param:\n",
    "        result_para=[]\n",
    "        for s,i in para.items():\n",
    "            result_para.append((s.split(\"__\")[1],i))\n",
    "        result_para_total.append(result_para)\n",
    "    stats=pd.DataFrame(data={\"precision (macro)\":precision_macro ,\"precision (micro)\":precision_micro,\"recall (macro)\" : recall_macro , \"recall (micro)\" : recall_micro ,\"f1 (macro)\" :f1_macro ,\"f1 (micro)\":f1_micro  , \"time to train\" :time_train, \"parameters\": result_para_total },index=labels)\n",
    "    return (estimators,stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.09566327 0.         0.2441664  0.18393794 0.26589746 0.20169667\n",
      " 0.22771267 0.27190032 0.27213169 0.2398717  0.31354157 0.24472723\n",
      " 0.39410788 0.24360579 0.44043537 0.20021932 0.39665148 0.23530026\n",
      " 0.42086954 0.26182952 0.37079406 0.2671549  0.34871054 0.27541214\n",
      " 0.32905711 0.25569679 0.27255545 0.29659084 0.32732609 0.24636971\n",
      " 0.31897467 0.25589764 0.25724828 0.199455  ]\n"
     ]
    }
   ],
   "source": [
    "train_variance = X_train.var(axis=0)\n",
    "print(train_variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "vthreshold = [0,0.1,0.2,0.3]\n",
    "k = [1,3, 5,7, 9, 11, 21, 31] # η υπερπαράμετρος του ταξινομητή kNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "selector = VarianceThreshold()\n",
    "ros = RandomOverSampler()\n",
    "\n",
    "\n",
    "pipe_Dummy = Pipeline(steps=[('selector', selector), ('sampler', ros), ('dummy', clf_Dummy)], memory = 'tmp')\n",
    "pipe_GNB = Pipeline(steps=[('selector', selector), ('sampler', ros), ('gnb', clf_GNB)],memory = 'tmp')\n",
    "pipe_KNN = Pipeline(steps=[('selector', selector), ('sampler', ros), ('knn', clf_KNN)], memory = 'tmp')\n",
    "\n",
    "\n",
    "estimator_Dummy_micro = GridSearchCV(pipe_Dummy, dict(selector__threshold=vthreshold), cv=10, scoring='f1_micro', n_jobs=-1)\n",
    "estimator_GNB_micro = GridSearchCV(pipe_GNB, dict(selector__threshold=vthreshold), cv=10, scoring='f1_micro', n_jobs=-1)\n",
    "estimator_KNN_micro = GridSearchCV(pipe_KNN, dict(selector__threshold=vthreshold,knn__n_neighbors=k), cv=10, scoring='f1_micro', n_jobs=-1)\n",
    "\n",
    "estimator_Dummy_macro = GridSearchCV(pipe_Dummy, dict(selector__threshold=vthreshold), cv=10, scoring='f1_macro', n_jobs=-1)\n",
    "estimator_GNB_macro = GridSearchCV(pipe_GNB, dict(selector__threshold=vthreshold), cv=10, scoring='f1_macro', n_jobs=-1)\n",
    "estimator_KNN_macro = GridSearchCV(pipe_KNN, dict(selector__threshold=vthreshold,knn__n_neighbors=k), cv=10, scoring='f1_macro', n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "untrained_estimators=[estimator_Dummy_micro,estimator_GNB_micro,estimator_KNN_micro,estimator_Dummy_macro,estimator_GNB_macro,estimator_KNN_macro]\n",
    "labels=[\"Dummy_micro\",\"GNB_micro\",\"KNN_micro\",\"Dummy_macro\",\"GNB_macro\",\"KNN_macro\"]\n",
    "\n",
    "estimators, stats= get_best_parameters(X_train, y_train,untrained_estimators,labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col0 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col1 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col2 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col3 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col4 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col5 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col6 {\n",
       "            background-color:  #f99355;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col0 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col1 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col2 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col3 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col4 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col5 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col6 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col0 {\n",
       "            background-color:  #323896;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col1 {\n",
       "            background-color:  #4574b3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col2 {\n",
       "            background-color:  #94c7df;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col3 {\n",
       "            background-color:  #4574b3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col4 {\n",
       "            background-color:  #5e93c3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col5 {\n",
       "            background-color:  #4574b3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col6 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col0 {\n",
       "            background-color:  #b91326;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col1 {\n",
       "            background-color:  #ea5739;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col2 {\n",
       "            background-color:  #bd1726;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col3 {\n",
       "            background-color:  #ea5739;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col4 {\n",
       "            background-color:  #dc3b2c;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col5 {\n",
       "            background-color:  #ea5739;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col6 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col0 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col1 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col2 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col3 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col4 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col5 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col6 {\n",
       "            background-color:  #a50026;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col0 {\n",
       "            background-color:  #323896;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col1 {\n",
       "            background-color:  #4574b3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col2 {\n",
       "            background-color:  #94c7df;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col3 {\n",
       "            background-color:  #4574b3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col4 {\n",
       "            background-color:  #5e93c3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col5 {\n",
       "            background-color:  #4574b3;\n",
       "            color:  #000000;\n",
       "        }    #T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col6 {\n",
       "            background-color:  #313695;\n",
       "            color:  #f1f1f1;\n",
       "        }</style><table id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >precision (macro)</th>        <th class=\"col_heading level0 col1\" >precision (micro)</th>        <th class=\"col_heading level0 col2\" >recall (macro)</th>        <th class=\"col_heading level0 col3\" >recall (micro)</th>        <th class=\"col_heading level0 col4\" >f1 (macro)</th>        <th class=\"col_heading level0 col5\" >f1 (micro)</th>        <th class=\"col_heading level0 col6\" >time to train</th>        <th class=\"col_heading level0 col7\" >parameters</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900level0_row0\" class=\"row_heading level0 row0\" >Dummy_micro</th>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col0\" class=\"data row0 col0\" >0.531561</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col1\" class=\"data row0 col1\" >0.492958</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col2\" class=\"data row0 col2\" >0.534420</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col3\" class=\"data row0 col3\" >0.492958</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col4\" class=\"data row0 col4\" >0.490431</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col5\" class=\"data row0 col5\" >0.492958</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col6\" class=\"data row0 col6\" >1.426189</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row0_col7\" class=\"data row0 col7\" >[('threshold', 0.2)]</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900level0_row1\" class=\"row_heading level0 row1\" >GNB_micro</th>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col0\" class=\"data row1 col0\" >0.898261</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col1\" class=\"data row1 col1\" >0.915493</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col2\" class=\"data row1 col2\" >0.914855</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col3\" class=\"data row1 col3\" >0.915493</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col4\" class=\"data row1 col4\" >0.905585</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col5\" class=\"data row1 col5\" >0.915493</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col6\" class=\"data row1 col6\" >0.096742</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row1_col7\" class=\"data row1 col7\" >[('threshold', 0)]</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900level0_row2\" class=\"row_heading level0 row2\" >KNN_micro</th>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col0\" class=\"data row2 col0\" >0.896023</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col1\" class=\"data row2 col1\" >0.873239</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col2\" class=\"data row2 col2\" >0.815670</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col3\" class=\"data row2 col3\" >0.873239</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col4\" class=\"data row2 col4\" >0.840926</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col5\" class=\"data row2 col5\" >0.873239</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col6\" class=\"data row2 col6\" >5.236866</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row2_col7\" class=\"data row2 col7\" >[('n_neighbors', 3), ('threshold', 0.2)]</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900level0_row3\" class=\"row_heading level0 row3\" >Dummy_macro</th>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col0\" class=\"data row3 col0\" >0.546474</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col1\" class=\"data row3 col1\" >0.563380</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col2\" class=\"data row3 col2\" >0.552536</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col3\" class=\"data row3 col3\" >0.563380</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col4\" class=\"data row3 col4\" >0.540021</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col5\" class=\"data row3 col5\" >0.563380</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col6\" class=\"data row3 col6\" >0.089768</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row3_col7\" class=\"data row3 col7\" >[('threshold', 0.1)]</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900level0_row4\" class=\"row_heading level0 row4\" >GNB_macro</th>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col0\" class=\"data row4 col0\" >0.898261</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col1\" class=\"data row4 col1\" >0.915493</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col2\" class=\"data row4 col2\" >0.914855</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col3\" class=\"data row4 col3\" >0.915493</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col4\" class=\"data row4 col4\" >0.905585</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col5\" class=\"data row4 col5\" >0.915493</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col6\" class=\"data row4 col6\" >0.097708</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row4_col7\" class=\"data row4 col7\" >[('threshold', 0)]</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900level0_row5\" class=\"row_heading level0 row5\" >KNN_macro</th>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col0\" class=\"data row5 col0\" >0.896023</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col1\" class=\"data row5 col1\" >0.873239</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col2\" class=\"data row5 col2\" >0.815670</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col3\" class=\"data row5 col3\" >0.873239</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col4\" class=\"data row5 col4\" >0.840926</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col5\" class=\"data row5 col5\" >0.873239</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col6\" class=\"data row5 col6\" >5.244496</td>\n",
       "                        <td id=\"T_53132d0a_2833_11eb_ab5b_1c1b0d697900row5_col7\" class=\"data row5 col7\" >[('n_neighbors', 3), ('threshold', 0.2)]</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x2c1cf86fb08>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.style.background_gradient(cmap ='RdYlBu') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dummy_micro\n",
      "The classification report for Dummy_micro\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.28      0.39      0.33        23\n",
      "        Good       0.64      0.52      0.57        48\n",
      "\n",
      "    accuracy                           0.48        71\n",
      "   macro avg       0.46      0.46      0.45        71\n",
      "weighted avg       0.52      0.48      0.49        71\n",
      "\n",
      "The confusion matrix for Dummy_micro\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GNB_micro\n",
      "The classification report for GNB_micro\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.84      0.91      0.87        23\n",
      "        Good       0.96      0.92      0.94        48\n",
      "\n",
      "    accuracy                           0.92        71\n",
      "   macro avg       0.90      0.91      0.91        71\n",
      "weighted avg       0.92      0.92      0.92        71\n",
      "\n",
      "The confusion matrix for GNB_micro\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN_micro\n",
      "The classification report for KNN_micro\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.94      0.65      0.77        23\n",
      "        Good       0.85      0.98      0.91        48\n",
      "\n",
      "    accuracy                           0.87        71\n",
      "   macro avg       0.90      0.82      0.84        71\n",
      "weighted avg       0.88      0.87      0.87        71\n",
      "\n",
      "The confusion matrix for KNN_micro\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVoAAAD4CAYAAACt8i4nAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAOqklEQVR4nO3da6xl9VnH8e9vKHXQXoRwyaSUogmILVJuL7CtlRajeOPyggTamrEhjiWoWDWA9YW1Ru0bqrHXjK11ahFFLQXb2EAHcFrDJVyGm0BpqlDsyCi1KbYUmLMfX+w15sgMZ+9zzv6fs/bq90P+WXutvdc6z8lsnnnmWf+1VqoKSVI7G9Y7AEkaOhOtJDVmopWkxky0ktSYiVaSGntR6x9w2dEXOK1B+9jx3H+sdwjqoVv+/aas9hjP/ddXps45Bx76g6v+edOwopWkxppXtJK0pkYL6x3BPky0koZlYc96R7APE62kQakarXcI+zDRShqWkYlWktqyopWkxjwZJkmNWdFKUlvlrANJasyTYZLUmK0DSWrMk2GS1JgVrSQ15skwSWrMk2GS1FaVPVpJasserSQ1ZutAkhqzopWkxhaeW+8I9mGilTQstg4kqTFbB5LUmBWtJDVmopWktsqTYZLUmD1aSWrM1oEkNWZFK0mN9bCi3bDeAUjSTNVo+jGFJAckuTvJZ7r1Q5LckOSRbnnwpGOYaCUNy54904/pXAI8uGj9cmB7VR0DbO/Wl2SilTQsM6xokxwJ/Czw0UWbzwa2da+3AedMOo6JVtKwjEZTjyRbktyxaGx53tH+BLgUWJyVj6iqXQDd8vBJIXkyTNKwLGPWQVVtBbbu770kPwfsrqo7k5y+mpBMtJKGZXazDl4PnJXkZ4CNwMuSfBJ4IsmmqtqVZBOwe9KBbB1IGpYZ9Wir6rer6siqOho4H7ixqt4GXAds7j62Gbh2UkhWtJKGZfrZBCv1XuDqJBcCjwHnTdrBRCtpWKoaHLJuBm7uXj8JnLGc/U20koalh1eGmWglDYuJVpIa86YyktTYwsJ6R7APE62kYbF1IEmNmWglqTF7tJLUVo1mP492tUy0kobF1oEkNeasA0lqzIpWkhoz0UpSYw1uKrNaJlpJw2JFK0mNzdv0riS/sdT7VfW+2YYjSavUw1kHkx5l89JunApcBLyiG+8AXv1COy1+suTOp748q1glaaIajaYea2XJiraqfg8gyfXAyVX1VLf+buBvl9jv/54sednRF/Svjpc0XPPWOljkKODZRevPAkfPPBpJWq05vtfBXwK3J7kGKOBc4BPNopKklZrXiraq/iDJ54A3dJveXlV3twtLklZoT/9Ohk09vauq7kzyVWAjQJKjquqxZpFJ0kr0sHUwadYBAEnOSvII8K/AP3XLf2wZmCStyKimH2tkqkQL/D5wGvClqvoB4CeAf24WlSStUB+nd02baJ+rqieBDUk2VNVNwIkN45KklelhRTttj/YbSV4C7ACuTLIb2NMuLElaoXmddQCcDTwNvBN4K/By4D2tgpKkFevhJbjTTu/6VvdylOSzwJNVPbwXmaTven18ZtiSPdokpyW5OcmnkpyU5H7gfuCJJGeuTYiStAxz2KP9APAuxq2CG4GfrqpbkxwHXAV8rnF8krQ8c3g/2hdV1fUASd5TVbcCVNVDSZoHJ0nL1sPWwaREu/ivhqef917/fhtJmsNE+9ok3wQCHNS9plvf2DQySVqBWpiz1kFVHbBWgUjSTMxhRStJc6WP07tMtJKGxUQrSY31r0VropU0LLWnf5nWRCtpWPqXZ6e+TaIkzYUa1dRjKUk2Jrk9yT1JHkiy96nghyS5Ickj3fLgSTGZaCUNy2gZY2nPAG+uqtcyvv/2mUlOAy4HtlfVMcD2bn1JJlpJgzKrirbG/qdbPbAbxfi2sdu67duAcybFZKKVNCzLqGiTbElyx6KxZfGhkhyQZCewG7ihqm4DjqiqXQDd8vBJIXkyTNKg1DKe/VJVW4GtS7y/AJyY5PuBa5Icv5KYrGglDUqNph9TH7PqG8DNwJmM78e9CaBb7p60v4lW0rDM6GRYksO6SpYkBzF++vdDwHXA5u5jm4FrJ4Vk60DSoCynUp1gE7AtyQGMi9Krq+ozSW4Brk5yIfAYcN6kA5loJQ3KrBJtVd0LnLSf7U8CZyznWCZaSYNSC/17+ouJVtKgzLB1MDMmWkmDUiMrWklqyopWkhqrsqKVpKasaCWpsZGzDiSpLU+GSVJjJlpJaqz69xBcE62kYbGilaTGnN4lSY0tOOtAktqyopWkxuzRSlJjzjqQpMasaCWpsYVR/x6FaKKVNCi2DiSpsZGzDiSpLad3SVJj35Wtgyu+tqP1j9AcevprX1jvEDRQtg4kqTFnHUhSYz3sHJhoJQ2LrQNJasxZB5LUWA8fgmuilTQshRWtJDW1x9aBJLVlRStJjdmjlaTGrGglqTErWklqbMGKVpLa6uGTbEy0koZlZEUrSW318aYy/bufmCStwmgZYylJXpnkpiQPJnkgySXd9kOS3JDkkW558KSYTLSSBmWUTD0m2AP8ZlX9MHAacHGSVwOXA9ur6hhge7e+JBOtpEFZWMZYSlXtqqq7utdPAQ8CrwDOBrZ1H9sGnDMpJhOtpEEZZfqRZEuSOxaNLfs7ZpKjgZOA24AjqmoXjJMxcPikmDwZJmlQljProKq2AluX+kySlwB/D/x6VX0zk1sO+7CilTQotYwxSZIDGSfZK6vqU93mJ5Js6t7fBOyedBwTraRBWU7rYCkZl64fAx6sqvcteus6YHP3ejNw7aSYbB1IGpQZ3uvg9cAvAPcl2dltexfwXuDqJBcCjwHnTTqQiVbSoCzM6MKwqvoivGDD94zlHMtEK2lQvHuXJDVmopWkxnr4yDATraRhsaKVpMYmXVq7Hky0kgbFG39LUmO2DiSpMROtJDXWxycsmGglDYo9WklqzFkHktTYqIfNAxOtpEHxZJgkNda/etZEK2lgrGglqbE96V9Na6KVNCj9S7MmWkkDY+tAkhpzepckNda/NGuilTQwtg4kqbGFHta0JlpJg2JFK0mNlRWtJLVlRStJjTm9S5Ia61+aNdFKGpg9PUy1SybaJCcv9X5V3TXbcCRpdebxZNgV3XIjcCpwDxDgBOA24A372ynJFmALQA54ORs2fN9MgpWkSfp4MmzDUm9W1Zuq6k3Ao8DJVXVqVZ0CnAR8eYn9tnafPdUkK2kt1TL+WyvT9miPq6r79q5U1f1JTmwUkyStWB8r2mkT7YNJPgp8kvFJvbcBDzaLSpJWaKHmr0e719uBi4BLuvUdwIebRCRJqzC382ir6jtJPgh8nnFF+3BVPdc0MklagXmcdQBAktOBbcC/MZ518Mokm6tqR7vQJGn55rlHewXwk1X1MECSY4GrgFNaBSZJKzG3rQPgwL1JFqCqvpTkwEYxSdKK9bF1sOQ82kXuSPKxJKd348+AO1sGJkkrsVA19ZgkyZ8n2Z3k/kXbDklyQ5JHuuXBk44zbaK9CHgA+DXGMw/+BXjHlPtK0poZUVOPKfwFcObztl0ObK+qY4Dt3fqSpp118EySDwA34KwDST02y5NhVbUjydHP23w2cHr3ehtwM3DZUsdx1oGkQVlOj3bxfVk6W6tq64TdjqiqXQBVtSvJ4ZN+jrMOJA3KcmYddEl1UmJdtWl7tPvMOgCcdSCpd6pq6rFCTyTZBNAtd0/aYaWzDj6Ksw4k9dACNfVYoeuAzd3rzcC1k3aYtnVwEXAx8KuMe7Q7gA+tIEBJamqWFywkuYrxia9DkzwO/C7wXuDqJBcCjwHnTTrOpCcsnA0cWVUfBN6X5HzgMOBE4HHg71bzS0jSrK2iJbC/Y13wAm+dsZzjTGodXMq4TN7rxYxPgJ3OuMqVpF6Z8TzamZjUOnhxVX110foXq+rrwNeT+OgESb3Tx0twJyXa/3dpWVX9yqLVw2YfjiStTh9v/D2pdXBbkl96/sYkvwzc3iYkSVq5eWwdvBP4dJK3AHsfLX4K8D3AOS0Dk6SVmLvbJFbVbuB1Sd4MvKbb/NmqurF5ZJK0ArOcdTAr095U5kbA5Cqp9+auopWkeTOPsw4kaa4sVP+eGmailTQoc9ujlaR5YY9WkhqzRytJjY1sHUhSW1a0ktSYsw4kqTFbB5LUmK0DSWrMilaSGrOilaTGFmphvUPYh4lW0qB4Ca4kNeYluJLUmBWtJDXmrANJasxZB5LUmJfgSlJj9mglqTF7tJLUmBWtJDXmPFpJasyKVpIac9aBJDXmyTBJaszWgSQ15pVhktSYFa0kNdbHHm36mP2HKsmWqtq63nGoX/xeDN+G9Q7gu8yW9Q5AveT3YuBMtJLUmIlWkhoz0a4t+3DaH78XA+fJMElqzIpWkhoz0UpSYybaGUmykGRnknuS3JXkdcvc/91JfqtVfFpbSY5I8ldJvpLkziS3JDl3Bse9Ocmps4hRa8crw2bn6ao6ESDJTwF/BPz4+oak9ZAkwKeBbVX1lm7bq4Cz1jUwrRsr2jZeBvw3QJKXJNneVbn3JTl774eS/E6Sh5N8Hvih9QpWM/dm4Nmq+sjeDVX1aFW9P8nGJB/vvgt3J3kTwBLbD0ry10nuTfI3wEHr8ytpNaxoZ+egJDuBjcAmxv+zAXwHOLeqvpnkUODWJNcBJwPnAycx/nO4C7hz7cNWA69h/Oe5PxcDVNWPJDkOuD7JsUtsvwj4dlWdkOSEJY6rHjPRzs7i1sGPAp9IcjwQ4A+TvBEYAa8AjgB+DLimqr7d7XPd+oSt1pJ8EHgD8CzwOPB+gKp6KMmjwLHd+/vb/kbgT7vt9ya5d+1/A62WrYMGquoW4FDgMOCt3fKULhE/wbjqBXp440zNwgOM/8UCQFVdDJzB+HuQF9jnhbaD35O5Z6JtoPun3wHAk8DLgd1V9VzXd3tV97EdwLldD+6lwM+vT7Rq4EZgY5KLFm373m65g/FfvnStgaOAh6fcfjxwwhrErxmzdTA7e3u0MK5ONlfVQpIrgX9IcgewE3gIoKru6k5u7AQeBb6wHkFr9qqqkpwD/HGSS4H/BL4FXAZcC3wkyX3AHuAXq+qZJB96ge0fBj7etQx2Arevx++k1fESXElqzNaBJDVmopWkxky0ktSYiVaSGjPRSlJjJlpJasxEK0mN/S/ds8r7o6MYewAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dummy_macro\n",
      "The classification report for Dummy_macro\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.26      0.35      0.30        23\n",
      "        Good       0.62      0.52      0.57        48\n",
      "\n",
      "    accuracy                           0.46        71\n",
      "   macro avg       0.44      0.43      0.43        71\n",
      "weighted avg       0.51      0.46      0.48        71\n",
      "\n",
      "The confusion matrix for Dummy_macro\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GNB_macro\n",
      "The classification report for GNB_macro\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.84      0.91      0.87        23\n",
      "        Good       0.96      0.92      0.94        48\n",
      "\n",
      "    accuracy                           0.92        71\n",
      "   macro avg       0.90      0.91      0.91        71\n",
      "weighted avg       0.92      0.92      0.92        71\n",
      "\n",
      "The confusion matrix for GNB_macro\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN_macro\n",
      "The classification report for KNN_macro\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.94      0.65      0.77        23\n",
      "        Good       0.85      0.98      0.91        48\n",
      "\n",
      "    accuracy                           0.87        71\n",
      "   macro avg       0.90      0.82      0.84        71\n",
      "weighted avg       0.88      0.87      0.87        71\n",
      "\n",
      "The confusion matrix for KNN_macro\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# F1 metric for all classifiers\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_evaluation(X_test,y_test,estimators,labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
=======
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of NN_Lab1.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DimitriosGkegkas/Neural-Networks/blob/main/Lab1/NN_Lab1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VhreihXLC6ZC",
        "outputId": "22548ab9-cdeb-40f9-ca0c-170d1dedf788",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "try:\n",
        "  !git clone https://github.com/DimitriosGkegkas/Neural-Networks\n",
        "  f = open(\"Neural-Networks/Lab1/data/semeion.data\")\n",
        "except:\n",
        "  f=open(data/semeion.data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'Neural-Networks'...\n",
            "remote: Enumerating objects: 11, done.\u001b[K\n",
            "remote: Counting objects: 100% (11/11), done.\u001b[K\n",
            "remote: Compressing objects: 100% (8/8), done.\u001b[K\n",
            "remote: Total 11 (delta 1), reused 11 (delta 1), pack-reused 0\u001b[K\n",
            "Unpacking objects: 100% (11/11), done.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kFbazQUTFNgw"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
>>>>>>> 92c9ee9a18d3a9ee1d8df889a61a71ecd6f22c5d
